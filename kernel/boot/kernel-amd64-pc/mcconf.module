# -*- mode:toml; -*-
[module.kernel-amd64-pc]
    incfiles = [ "boot/mlog.hh" ]
    kernelfiles = [ "boot/start.S", "boot/mlog.cc" ]
    requires = [ "tag/platform/pc", "symbol/entry_ap", "symbol/entry_bsp" ]
    provides = [ "boot32.elf", "boot64.elf", "symbol/_mboot_table", "symbol/_mboot_magic" ]

    makefile_head = '''
TARGETS += boot32.elf boot64.elf
EXTRATARGETS += kernel2.cc kernel2.o
DEP += kernel2.d
'''

    makefile_body = '''
kernel2_other = $(filter-out %.cc, $(KERNELFILES))
kernel2_obj = $(addsuffix .o, $(basename $(kernel2_other)))

kernel2.cc:
	echo "" > kernel2.cc
	for F in $(filter %.cc, $(KERNELFILES)) ; do echo "#include \"$$F\"" >> kernel2.cc ; done

kernel2.o: kernel2.cc
	$(KERNEL_CXX) $(KERNEL_CXXFLAGS) $(KERNEL_CPPFLAGS) $(DEPFLAGS) -c -o $@ $<

boot64.elf: boot/boot.o $(kernel2_obj) kernel2.o
	$(KERNEL_LD) $(KERNEL_LFLAGS) -o boot64.elf -dT boot/boot.o kernel2.o $(kernel2_obj)
	nm boot64.elf | cut -d " " -f 1,3 | c++filt -t > boot.sym
	nm -S --size-sort -C boot64.elf > boot.size
	objdump -dS boot64.elf | c++filt > boot.disasm
	strip boot64.elf

# boot64.elf: boot/boot.o $(KERNELFILES_OBJ)
# 	$(KERNEL_LD) $(KERNEL_LFLAGS) -o boot64.elf -dT boot/boot.o $(KERNELFILES_OBJ)
# 	nm  boot64.elf | cut -d " " -f 1,3 | c++filt -t > boot.sym
# 	objdump -dS boot64.elf | c++filt > boot.disasm
# 	strip boot64.elf

boot32.elf: boot64.elf
	objcopy --strip-debug -I elf64-x86-64 -O elf32-i386 boot64.elf boot32.elf
'''

[module.kernelspace-amd64-pc]
    incfiles = [ "boot/memory-layout.h", "boot/DeployKernelSpace.hh" ]

/* -*- mode:C++; -*- */
/* MIT License -- MyThOS: The Many-Threads Operating System
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Copyright 2021 Philipp Gypser and Florian Bartz, BTU Cottbus-Senftenberg
 */
#pragma once

#include "cpu/ctrlregs.hh"
#include "util/bitfield.hh"

#include <cstdint>
#include <cstddef>

namespace mythos {
  namespace x86 {
    constexpr size_t MAX_NUM_FIXED_CTRS = 3;
    constexpr size_t MAX_NUM_PMCS = 4;
    constexpr size_t MAX_NUM_OFFCORE_RSP_MSRS = 2;

    /* architectural performance monitoring events availability bits in EBX using cpuid */
    enum PerfMonEventAvail{
      // Core cycle event not available if 1
      CORE_CYCLE_EVENT_AVAIL = 0,
      // Instruction retired event not available if 1
      INSTR_RETIRED_EVENT_AVAIL = 1,
      // Reference cycles event not available if 1
      REF_CYCLES_EVENT_AVAIL = 2,
      // Last-level cache reference event not available if 1
      LL_CACHE_REF_EVENT_AVAIL = 3,
      // Last-level cache misses event not available if 1
      LL_CACHE_MISS_EVENT_AVAIL = 4,
      // Branch instruction retired event not available if 1
      BRANCH_INSTR_RETIRED_EVENT_AVAIL = 5,
      // Branch mispredict retired event not available if 1
      BRANCH_MISPRED_RETIRED_EVENT_AVAIL = 6,
      // Top-down slots event not available if 1
      TOP_DOWN_SLOTS_EVENT_AVAIL = 7
    };

    /* Performance Event Select Register */
		BITFIELD_DEF(uint64_t, IA32_FIXED_CTR_CTRL_Bitfield)
		BoolField<value_t,base_t,0> ff0_enable_os;
		BoolField<value_t,base_t,1> ff0_enable_user;
		BoolField<value_t,base_t,2> ff0_anyThread;
		BoolField<value_t,base_t,3> ff0_pmi; // Enable PMI on overflow
		BoolField<value_t,base_t,4> ff1_enable_os;
		BoolField<value_t,base_t,5> ff1_enable_user;
		BoolField<value_t,base_t,6> ff1_anyThread;
		BoolField<value_t,base_t,7> ff1_pmi; // Enable PMI on overflow
		BoolField<value_t,base_t,8> ff2_enable_os;
		BoolField<value_t,base_t,9> ff2_enable_user;
		BoolField<value_t,base_t,10> ff2_anyThread;
		BoolField<value_t,base_t,11> ff2_pmi; // Enable PMI on overflow
    IA32_FIXED_CTR_CTRL_Bitfield() : value(0) {}
    BITFIELD_END

    /* Configure Off-core Response Events */
		BITFIELD_DEF(uint64_t, MSR_OFFCORE_RSPx_Bitfield)
    //Counts the number of demand and DCU prefetch data reads of full and partial 
    //cachelines as well as demand data page table entry cacheline reads. Does not 
    //count L2 data read prefetches or instruction fetches.
		BoolField<value_t,base_t,0> dmnd_data_rd; 
    //Counts the number of demand and DCU prefetch reads for ownership (RFO) 
    //requests generated by a write to data cacheline. Does not count L2 RFO.
		BoolField<value_t,base_t,1> dmnd_rfo; 
    //Counts the number of demand instruction cacheline reads and L1 instruction 
    //cacheline prefetches.
		BoolField<value_t,base_t,2> dmnd_ifetch; 
    //Counts the number of writeback (modified to exclusive) transactions.
		BoolField<value_t,base_t,3> wb; 
    //Counts the number of data cacheline reads generated by L2 prefetchers.
		BoolField<value_t,base_t,4> pf_data_rd; 
    //Counts the number of RFO requests generated by L2 prefetchers.
		BoolField<value_t,base_t,5> pf_rfo; 
    //Counts the number of code reads generated by L2 prefetchers.
		BoolField<value_t,base_t,6> pf_ifetch; 
    //Counts one of the following transaction types, including L3 invalidate, I/O, 
    //full or partial writes, WC or non-temporal stores, CLFLUSH, Fences, lock, 
    //unlock, split lock.
		BoolField<value_t,base_t,7> other; 
    //L3 Hit: local or remote home requests that hit L3 cache in the uncore with no 
    //coherency actions required (snooping).
		BoolField<value_t,base_t,8> uncore_hit; 
    //L3 Hit: local or remote home requests that hit L3 cache in the uncore and was 
    //serviced by another core with a cross core snoop where no modified copies were 
    //found (clean).
		BoolField<value_t,base_t,9> other_core_hit_snp; 
    //L3 Hit: local or remote home requests that hit L3 cache in the uncore and was 
    //serviced by another core with a cross core snoop where modified copies were 
    //found (HITM).
		BoolField<value_t,base_t,10> other_core_hitm; 
		/*BoolField<value_t,base_t,11> reserved;*/ 
    //L3 Miss: local homed requests that missed the L3 cache and was serviced by 
    //forwarded data following a cross package snoop where no modified copies found. 
    //(Remote home requests are not counted)
		BoolField<value_t,base_t,12> remote_cache_fwd; 
    //L3 Miss: remote home requests that missed the L3 cache and were serviced by 
    //remote DRAM.
		BoolField<value_t,base_t,13> remote_dram; 
    //L3 Miss: local home requests that missed the L3 cache and were serviced by 
    //local DRAM.
		BoolField<value_t,base_t,14> local_dram; 
    //Non-DRAM requests that were serviced by IOH.
		BoolField<value_t,base_t,15> non_dram; 
    MSR_OFFCORE_RSPx_Bitfield() : value(0) {}
		BITFIELD_END

    /* Performance Event Select Register */
		BITFIELD_DEF(uint64_t, IA32_PERFEVTSELx_Bitfield)
		UIntField<value_t,base_t,0,8> eventSelect;
		UIntField<value_t,base_t,8,8> unitMask;
		BoolField<value_t,base_t,16> userMode;
		BoolField<value_t,base_t,17> operatingSystemMode;
		BoolField<value_t,base_t,18> edgeDetect;
		BoolField<value_t,base_t,19> pinControl;
		BoolField<value_t,base_t,20> apicInteruptEnable;
		BoolField<value_t,base_t,21> anyThread;
		BoolField<value_t,base_t,22> enableCounters;
		BoolField<value_t,base_t,23> invert;
		UIntField<value_t,base_t,24,8> counterMask;
    IA32_PERFEVTSELx_Bitfield() : value(0) {}
		BITFIELD_END

  } // namespace x86
} // namespace mythos
